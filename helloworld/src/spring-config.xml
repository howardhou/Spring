<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>message</value>
            </list>
        </property>
    </bean>

    <bean id="personService" class="com.example.service.PersonService">
        <property name="name" value="hello world"/>
    </bean>
    <!--配置一个 prototype Bean-->
    <bean id="personService2" class="com.example.service.PersonService" scope="prototype">
        <property name="name" value="hello world"/>
    </bean>

    <!--通过parent属性定义 Bean-->
    <bean id="chinese" parent="chineseTemplate">
        <!--设值注入-->
        <property name="axe" ref="stoneAxe"/>
        <!--使用构造注入-->
        <!--<constructor-arg ref="stoneAxe" />-->
    </bean>
    <bean id="stoneAxe" class="com.example.service.StoneAxe" />
    <bean id="stealAxe" class="com.example.service.SteelAxe" />

    <!--配置监听器-->
    <bean class="com.example.listener.EmailNotifier" />

    <!--设置普通属性值-->
    <bean id="achinese" parent="chineseTemplate">
        <constructor-arg name="name" value="houdongdong" />
        <constructor-arg name="age" value="32" />
        <constructor-arg name="height" value="7.3" />
    </bean>
    <!--注入集合值-->
    <bean id="chinese2" parent="chineseTemplate">
        <!--配置List属性-->
        <property name="schools">
            <list>
                <value>小学</value>
                <value>中学</value>
                <value>大学</value>
            </list>
        </property>
        <!--配置 Map 属性-->
        <property name="scores">
            <map>
                <entry key="语文" value="87"/>
                <entry key="英语" value="89"/>
                <entry key="数学" value="97"/>
            </map>
        </property>
        <!--配置 Map 属性-->
        <property name="phaseAxes">
            <map>
                <entry key="原始社会" value-ref="stoneAxe"/>
                <entry key="农业社会" value-ref="stealAxe"/>
            </map>
        </property>
        <!--配置 Properties 属性-->
        <property name="health">
            <props>
                <prop key="血压">正常</prop>
                <prop key="身高">178</prop>
            </props>
        </property>
        <!--配置 set 属性-->
        <property name="axes">
            <set>
                <value>普通的字符串</value>
                <bean class="com.example.service.SteelAxe"/>
            </set>
        </property>
        <property name="books">
            <list>
                <value>明朝那些事</value>
                <value>三体</value>
                <value>算法指引</value>
            </list>
        </property>
    </bean>
    <!--复合属性-->
    <bean id="chinese3" parent="chineseTemplate">
        <property name="axe.name" value="鬼斧神工" />
    </bean>

    <!--以XML配置为主时，需要让XML配置能加载Java 的配置类-->
    <context:annotation-config />
    <bean class="com.example.SpringConfig" />

    <!-- 使用静态工厂创建Bean , Bean 由静态工厂负责创建，静态工厂(BeingFactory)由Spring容器负责管理 -->
    <bean id="dog" class="com.example.factory.BeingFactory" factory-method="getBeing">
        <!--配置静态工厂方法的参数-->
        <constructor-arg value="dog" />
        <!--注入dog的属性值-->
        <property name="msg" value="我是狗" />
    </bean>
    <bean id="cat" class="com.example.factory.BeingFactory" factory-method="getBeing">
        <constructor-arg value="cat" />
        <property name="msg" value="我是猫" />
    </bean>

    <!-- 使用实例工厂创建Bean, Bean 由实例工厂负责创建，实例工厂(PersonFactory)由Spring容器负责创建和管理-->
    <bean id="personFactory" class="com.example.factory.PersonFactory" />
    <bean id="chinese5" factory-bean="personFactory" factory-method="getPerson">
        <constructor-arg value="chinese" />
    </bean>
    <bean id="american" factory-bean="personFactory" factory-method="getPerson">
        <constructor-arg value="american" />
    </bean>

    <!--使用 abstract 定义抽象Bean-->
    <bean id="chineseTemplate" class="com.example.service.Chinese" abstract="true">
        <property name="axe" ref="stealAxe" />
        <property name="name" value="someone" />
    </bean>

    <!-- 使用工厂Bean： FactoryBean-->
    <bean id="chinese6" class="com.example.factory.ChineseFactoryBean" />

    <bean id="english" class="com.example.service.English" />

    <!--使用depends-on强制初始化 english2 之前初始化 cat-->
    <bean id="english2" class="com.example.service.English" depends-on="cat"/>

    <!--让Bean能够访问Spring容器-->
    <bean id="japanese" class="com.example.service.Japanese" />

    <!--配置Bean 的 init-method 方法，初始化完成之前，先调用 afterPropertiesSet 方法，再调用init方法-->
    <bean id="korean" class="com.example.service.Korean" init-method="init">
        <property name="axe" ref="stoneAxe" />
    </bean>

    <!--配置Bean的 destroy-method 方法，销毁完成之前，先调用 destroy 方法，再调用 close 方法-->
    <bean id="french" class="com.example.service.French" destroy-method="close">
        <property name="axe" ref="stealAxe"/>
    </bean>

    <!--协调作用域不同步的Bean-->
    <!--使用 prototype 作用域-->
    <bean id="woodAxe" class="com.example.service.WoodAxe" scope="prototype" />
    <bean id="german" class="com.example.service.German">
        <!--指定 getAxe 方法的返回值，调用 getAxe 方法返回woodAxe-->
        <lookup-method name="getAxe" bean="woodAxe"/>
    </bean>

    <!--注入其他Bean的属性值：定义目标Bean-->
    <bean id="canada" class="com.example.service.Canada">
        <property name="age" value="30"/>
        <property name="pet">
            <bean class="com.example.service.Pet">
                <property name="age" value="3"/>
            </bean>
        </property>
    </bean>

    <!--注入其他Bean的属性值：获得目标Bean的属性值，再将获得的值被注入给pet1 的 age属性-->
    <bean id="pet1" class="com.example.service.Pet">
        <property name="age">
            <bean id="canada.pet.age" class="org.springframework.beans.factory.config.PropertyPathFactoryBean"/>
        </property>
    </bean>

    <!--将目标Bean的属性值定义成 Bean实例-->
    <bean id="pet2" class="org.springframework.beans.factory.config.PropertyPathFactoryBean">
        <!--确定目标Bean，表明pet2 来自哪个Bean-->
        <property name="targetBeanName" value="canada"/>
        <!--确定属性表达式，表明pet2 来自目标Bean的哪个属性-->
        <property name="propertyPath" value="pet"/>
    </bean>

    <!--将目标Bean的属性值定义成 Bean实例-->
    <bean id="theAge" class="org.springframework.beans.factory.config.PropertyPathFactoryBean">
        <!--确定目标Bean，表明 theAge 来自哪个Bean-->
        <property name="targetBeanName" value="canada"/>
        <!--确定属性表达式，表明 theAge 来自目标Bean的哪个属性, 此处使用复合属性-->
        <property name="propertyPath" value="pet.age"/>
    </bean>

    <!--注入其他Bean中的方法的返回值： 定义目标Bean-->
    <bean id="ageGenerator" class="com.example.util.ValueGenerator"/>
    <!--注入其他Bean中的方法的返回值： 指定调用目标Bean的哪个方法-->
    <bean id="pet3" class="com.example.service.Pet">
        <property name="age">
            <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                <!--确定目标Bean，表明 pet3 调用哪个Bean-->
                <property name="targetObject" ref="ageGenerator"/>
                <!--确定目标方法，表明 pet3 调用 Bean 的哪个方法-->
                <property name="targetMethod" value="getAge"/>
            </bean>
        </property>
    </bean>

    <!--注入其他Bean中的方法的返回值： 指定调用目标类的哪个静态方法-->
    <bean id="pet4" class="com.example.service.Pet">
        <property name="age">
            <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
                <!--确定目标类，表明 pet4 调用哪个类-->
                <property name="targetClass" value="com.example.util.ValueGenerator"/>
                <!--确定目标方法，表明 pet4 调用 类的哪个方法-->
                <property name="targetMethod" value="getStaticAge"/>
            </bean>
        </property>
    </bean>

    <!--注入其他Bean中的方法的返回值： 指定调用目标类的哪个静态方法（方法带参数）-->
    <bean id="javaVersion" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="com.example.util.ValueGenerator"/>
        <property name="targetMethod" value="getProperty"/>
        <property name="arguments" value="java.version"/>
    </bean>

    <!--使用 p 名称空间配置属性-->
    <bean id="korean2" class="com.example.service.Korean" p:axe-ref="stoneAxe" p:name="朴再银"/>

    <!--在Spring 配置文件中 使用表达式语言配置Bean-->
    <bean id="korean3" class="com.example.service.Korean" p:axe="#{new com.example.service.SteelAxe()}"
          p:name="#{'HelloWorld'.concat('!')} - #{T(java.lang.Math).random()}" />

    <!--配置Bean后处理器-->
    <!--<bean class="com.example.util.MyBeanPostProcessor" />-->

    <!--配置Spring容器后处理器-->
    <bean class="com.example.util.MyBeanFactoryPostProcessor" />
</beans>